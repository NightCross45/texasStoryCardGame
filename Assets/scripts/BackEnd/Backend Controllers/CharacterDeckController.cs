//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using UnityEngine;
using System.Xml;


namespace AssemblyCSharp
{
	public class CharacterDeckController
	{

		private CharactersDeck characterDeck = new CharactersDeck();


		//Create Characters from the XML. Should be called first.
		public void CreateCharacterDeckFromXml()
		{
			//Debug.Log ("Creating character deck.");
			CharacterCard emptyCharacter = new CharacterCard ();
			StringReader strReader = null;
			TextAsset puzdata = (TextAsset)Resources.Load ("xml/Character", typeof(TextAsset));
			strReader = new StringReader (puzdata.text);
			
			
			using (XmlReader reader = System.Xml.XmlReader.Create(strReader)) {
				while (reader.Read()) {
					if (reader.IsStartElement ()) {
						switch (reader.Name) {
						case "END":
							addCharacterToDeck(emptyCharacter);
							emptyCharacter = new CharacterCard ();
							break;
						case "ID":
							if (reader.Read ()) {
								emptyCharacter.setCardID (int.Parse (reader.Value.ToString ()));
							}
							break;
						case "PREFABNAME":
							if (reader.Read ()) {
								emptyCharacter.setPrefabName (reader.Value.ToString ());
							}
							break;
						case "name":
							if (reader.Read ()) {
								emptyCharacter.setName (reader.Value.ToString ());
							}
							break;
						case "HP":
							if (reader.Read ()) {	
								emptyCharacter.setHP (int.Parse (reader.Value.ToString ()));
							}
							break;
						case "ST":
							if (reader.Read ()) {
								emptyCharacter.setST (int.Parse (reader.Value.ToString ()));
							}
							break;	
						case "SP":
							if (reader.Read ()) {
								emptyCharacter.setSP (int.Parse (reader.Value.ToString ()));
							}
							break;
						case "AC":
							if (reader.Read ()) {
								emptyCharacter.setAC (int.Parse (reader.Value.ToString ()));
							}
							break;						
						case "LK":
							if (reader.Read ()) {
								emptyCharacter.setLK (int.Parse (reader.Value.ToString ()));
							}
							break;												
						}
					}
				}	
				
			}
		} //End Character Deck

		//Adds a character to the deck.
		public void addCharacterToDeck(ICard card)
		{
			CharacterCard characterCard = new CharacterCard ();
			characterCard = (CharacterCard)card;
			characterDeck.addCardToDeck (card);
		}

		//Removes a character from the deck. If it
		public void removeCharacterFromDeck(int cardID)
		{
			characterDeck.removeCardFromDeck (cardID);
		}
		
		public CharacterCard drawCharacterCardFromDeck(int cardID)
		{
			CharacterCard characterCard = new CharacterCard ();
			characterCard = (CharacterCard)characterDeck.drawCardFromDeck(cardID);
			//Debug.Log ("Drew the " + characterCard.getName() + " card.");
			return characterCard;
		}
		
		public int getTotalCards()
		{
			return characterDeck.getTotalCardsOfDeck ();
		}




	}
}

